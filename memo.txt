[group folder]
(폴더명) 형식으로 만드는 것이다. 사용목적은 그룹별 layout을 달리할 때 사용한다. url에 표시되지 않는다.

[ private folder ]
_폴더명 형식으로 만드는 것이다. url에 표시되지 않는다.

[ parallel 라우트]

@modal 디렉토리를 만들고 경로를 설정해 화면을 만들면 해당 화면도 함께 보여진다.
layout.tsx 에서 {children}과 함께 {modal}도 선언해야 한다.

[ 인터셉팅 라우팅 ]
(.경로), (..경로) 의 디렉토리를 만들어 사용한다.
localhost:3000/i/flow/login 으로 이동(라우팅)
(.i)/flow/login/page.tsx 로 연결이 되어진다. 해당 파일은 parallel 라우트이므로 children이 아닌 modal로 띄워진다.

즉, localhost:3000 에서 로그인 버틑을 눌러 /i/flow/login 으로 이동을 하는 액션이라면
처음 메인 페이지 (beforLogin)/page.tsx 위에 (인터셉팅 을 통해) (.i)/flow/login/page.tsx 화면이 modal로 뜨게 된다.

그럼 기존의 (beforeLogin)/i/flow/login은 항상 인터셉팅 당해서 안뜨는 거냐? 라고 생각할 수 있지만
라우팅 과정 없이 localhost:3000/i/flow/login 를 직접 입력하거나 해당 주소에서 새로고침을 하게되면 화면이 뜬다.


[useSelectedLayoutSegment(s)]
next 에서 제공하는 훅으로 현재 위치한 메뉴를 알려준다.
const segment = useSelectedLayoutSegment()로 선언하면
/compose/tweet 에 진입 시 segment 는 compose 를 리턴 하고
const segment = useSelectedLayoutSegments() 로 선언하면
['compose', 'tweet']을 리턴한다.


[ MSW(Mock Service Worker)로 임시 API 만들어 사용하기 ]

현재 Next 14 버전에 완벽하게 적용된 것은 아니지만 사용할만한 수준이다.
에러나는 상황을 만들어 테스트 할 때도 유용하게 사용한다.

1. MSW 설치
    > npx msw init public/ --save
    > npm install msw --save-dev

    public 폴더 안에 mockServiceWorker.js 파일이 생성된다.
    이 파일은 요청하는 request 를 가로채서 내부 로직에 따라 response 해주게 된다.

2-1. /src/mocks/http.ts
    Next 는 서버단에서도 돌아가기 때문에 MSW 가 서버에서도 실행되어야 한다. 하지만 현재는 지원하고 있지않아 노드 서버를 이용한다.
    > npm i -D @mswjs/http-middleware express cors
    > npm i --save-dev @types/express @types/cors

2-2. /src/mocks/browser.ts
    이 파일은 클라이언트에서 실행되는 환경이다.

3. >/src/mocks/handlers.ts
    이 파일에서 실제 response 내용을 작성한다.
    http.ts 와 browser.ts 가 이 핸들러를 사용한다.

4. package.json 에 msw 실행 명령어를 추가한다.
    "mock": npx tsx watch ./src/mocks/http.ts
    > npm run mock


5. /app/_component/MSWComponent.tsx 생성
    (afterLogin), (beforeLogin) 모두 적용되어야 하므로 /app/_component 에 만들어주고
    /app/layout.tsx에 넣어준다.
6. .env.local 파일을 만들고 환경변수 추가
    개발 환경에서만 msw를 사용하면 되므로 .env.local 파일에 환경변수를 추가한다.

    NEXT_PUBLIC_API_MOCKING = enabled
    환경변수 앞에 NEXT_PUBLIC_ 가 붙어있으면 브라우저에서 접근 가능한 환경변수이고
    API_MOCKING = enabled 이렇게 선언하면 서버에서만 접근이 가능하다. ( 브라우저에 노출되지 않는다.)


[ useFormState, useFormStatus ]
 React 에서 지원하는 두 가지 훅
 const [state, formAction] = useFormState(fn, initialState)

 const {pending, data, method, action} = useFormStatus
    pending: 처리중인지 완료되었는지 (boolean)
    data: form 에서 서버로 보낸 데이터
    method: form 이 'get' 인지 'post' 인지
    action: form 이 어떤 함수를 action 으로 보내는지

[ next auth.js ]
로그인 관련 다양한 기능을 제공해주는 라이브러리이다. App Router 에서는 기존에 없었던 Middleware 기능을 제공한다.
페이지가 렌더링 되기 전에 middleware.ts 안의 middleware 함수가 먼저 실행되어진다. 이번 프로젝트에서는
export {auth as middleware} from "./auth" 를 선언하면서 auth.ts가 middleware 함수 대신 실행된다.
 > npm i next-auth@5.0.0-beta.3 @auth/core

 1. /src/auth.ts & /src/middleware.ts 생성

 ->> Server Component 에서는 './auth' 를 사용하고 Client Component 에서는 '@/auth' 를 사용했다.


[catch-all Route]
[..folderName] 으로 만드러진 폴더이다.
/api/auth/[..nextauth] 의 경우에는 /api/auth/a or /api/auth/a/b or /api/auth/a/b/c/d/e
이처럼 /api/auth 뒤에 오는 모든 것이 포함된다.


[react-query, react-query-devtools 설치]
  > npm install @tanstack/react-query@5
  > npm install @tanstack/react-query-devtools@5 -D


react-query 는 로그인 이후 화면에서 사용할 것이기 때문에 (afterLogin)/_component 에 RQProvider를 생성한다.


[ hydration ]
(afterLogin)/home/page.tsx 에서 서버에서 받은 데이터(dehydratedState) 를 HydrationBoundary( react-query 에서 제공)를 통해
클라이언트가 사용할 수 있도록 Hydration 시킨다

[ React Query ]
  < State >
  Fresh: 최신 데이터라는 상태이며, Refetch 가 발생하지 않고 캐시 데이터를 사용한다.
  Fetching: 데이터를 Fetching 하는중
  Paused
  Stale: 최신 데이터가 아니며, 옵션에 따라 Data Fetch 가 발생한다.
  inActive: 활성화 여부, 해당쿼리를 사용하지 않는 상태이다. ( 다른 컴포넌트로 이동할 경우 이전 컴포넌트에서 사용한 쿼리는 inActive)

  < useQuery Options >
  queryKey: 쿼리를 특정할 수 있는 key 이다. key 를 이용해서 쿼리를 새로고침 할 수 있다.
  queryFn: 실제로 실행되는 Fetch 함수이다.
  staleTime: Fresh 상태를 유지해주는 시간이고, 단위는 ms 이다. 60*1000 (1분)
  gcTime: 가비지 컬렉션 시간이며, 쿼리가 inActive 된 이후 메모리에 몇분간 유지할 것이냐이다. ( default 5분 )
    ** staleTime 이 gcTime 보다 짧아야 한다.
  initialData:() => [] : 쿼리의 초기값을 지정한다.

  < Query Actions _ devtools >
  devtools 를 사용하면 useQuery 로 호출한 쿼리들의 정보를 한눈에 볼 수 있다. 실행된 커리들의 상태(fresh, fetching, ...)를 확인 할 수 있고
  아래의 Actions 를 통해 쿼리 상태나 데이터를 수정 할 수 있다. ( 하나의 쿼리를 선택할 경우 Actions 를 실행할 수 있다 )

  Refetch: 데이터를 다시 Fetch 해 가지고 온다.
  Invalidate: 선택된 커리를 Invalidate 시켜 Refetch 와 동일하게 데이터를 fetch 시키지는 기능이다.
              Refetch와 다른점은 현재 컴포넌트에서 사용하고 있는 쿼리가 아닐 경우 fetch 가 일어나지 않고
              사용하는 컴포넌트(페이지)로 이동 할 경우 invalidate 된 쿼리가 실행된다.
  Reset: query option 으로 지정했던 initialData 값으로 세팅한다.
  Remove: 선택한 쿼리를 제거한다.
  Restore Loading: 쿼리를 로딩 상태로 바꾼다 (로딩 테스트)
  Trigger Error: 쿼리에 에러를 발생시킨다 ( 에러테스트)

[ InfiniteQuery ]
> Server Component (Home.tsx)
무한 스크롤링을 위해 기존 queryClient.prefetchQuery 를 prefetchInfiniteQuery 로 바꿔준다.
데이터를 hydration 해서 사용하는 PostRecommends.tsx 에서도 기존 useQuery > useInfiniteQuery 로 바꿔 준다.

옵션에 initialPageParam 을 필수로 넣어주어야 한다.


[intersection-observer]
> npm i react-intersection-observer
특정 태그가 화면에 노출되면 이벤트를 발생시킨다.

[loading.tsx & error.tsx]
해당 파일들은 서버 컴포넌트에서 로딩, 에러가 발생할 때 보여지는 화면들이다.
예를들어 서버 컴포넌트인 @/(afterLogin)/home/page.tsx 에서 prefetch query 할 때 에러가 발생하면 @/(afterLogin)/home/error.tsx 가 보여진다.
하지만 클라이언트 컴포넌트인 @/(afterLogin)/home/_component/PostRecommends.tsx 에서 에러가 발생했을 땐 보여지지 않는다.
클라이언트 컴포넌트에서 에러 페이지를 렌딩하고 싶으면 해당 파일 내에 작성해야한다. (useQuery 의 isError 사용)

[loading.tsx]

@/(afterLogin)/home/page.tsx 에서 <Suspense fallback={<Loading/>}> 을 사용했기 때문에 /home 에 진입 시
<Tab/> <PostForm/> 두개의 컴포넌트는 바로 렌더링 되어지고 ( 좌, 우 메뉴들은 layout 이므로 Next 에서 Streaming 한다.)
<TabDecider/> 영역만 로딩 스피너가 돌아간다. 하지만, <Suspense fallback={<Loading}>은 서버에서 데이터 패칭이 되는 동안 로딩 화면을 보여주는 것이므로
서버에서 prefetchInfiniteQuery 를 사용하는 PostRecommends.tsx 에만 <Loading/> 화면이 노출되고
FollowingPost.tsx 는 해당 컴포넌트에서 if(isPending) 을 사용해 <Loading/> 화면을 보여줘야 한다.

But, FollowingPost 에서 useQuery 대신 useSuspenseQuery 를 사용하면 클라이언트 컴포넌트라도 <Suspense fallback={<Loading/>}> 적용을 받는다.

[rewrite]
next.config.js 에 rewrite 함수를 등록해 특정 규칙의 주소에 prefix 를 적용해준다.

[Optimistic Update]
쿼리가 성공했다고 가정하고 setQueryData 로 데이터를 변경하고, 만약 에러가 발생하면 데이터를 원복시킨다.

[ 프론트 서버에 쿠키 보내기 ]
유저 프로필에서 팔로우를 하게되면 팔로잉으로 표시되었다가 새로고침을 누르면 다시 팔로우로 변경된다.
이유는 (afterLogin)/[username]/page.tsx(서버 컴포넌트) 에서 prefetchQuery 로 getUser 를 호출 했을 때의 서버 데이터가 사용되었기 때문이다.
prefetchQuery 시 쿠키를 브라우저에 전달해야 서버 & 클라이언트 데이터가 동기화된다.
getUser() 에 header:{Cookies().toString()} 을 옵션으로 추가해주어야 한다.
하지만 해당 옵션은 서버 컴포넌트에서만 사용할 수 있는데 UserInfo.tsx 는 클라이언트 컴포넌트 이므로 getUserServer() 를 만들어 preFetch 시에 해당 함수를 호출시킨다.

-> prefetch 한 쿼리를 클라이언트 컴포넌트에서 CSR 로 사용 한다면 쿠키를 넘겨주거나 클라이언트 컴포넌트에서 staleTime 을 없애야 한다.(바로 리패치)

[ 메타데이터 설정 ]
아래 코드를 추가해주면 된다.
export const metadata: Metadata = {
    title: 'Z. 무슨 일이 일어나고 있나요? / Z',
    description: 'Z.com inspired by X.com',
}

단순 문자가 아니라면 generateMetadata 함수를 사용한다.
export async function generateMetadata({searchParams}: Props): Promise<Metadata> {
  return {
    title: `${searchParams.q} - 검색 / Z`,
    description: `${searchParams.q} - 검색 / Z`,
  }
}

[ Zustand ]
> npm i zustand

설치후 /src 밑에 store 폴더 생성하고 공유하려는 상태를 만들어준다(modal.tsx)
